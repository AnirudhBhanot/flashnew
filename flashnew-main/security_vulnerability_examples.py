#!/usr/bin/env python3
"""
Security Vulnerability Examples
Demonstrates unfixed security issues in the FLASH API
"""

import requests
import json

# Base URL for API
BASE_URL = "http://localhost:8001"

print("=== FLASH Security Vulnerability Examples ===\n")

# 1. No Authentication Required
print("1. UNAUTHENTICATED ACCESS TO SENSITIVE ENDPOINTS:")
print("-" * 50)
try:
    # System info exposes internal details without auth
    response = requests.get(f"{BASE_URL}/system_info")
    if response.status_code == 200:
        print("❌ VULNERABLE: /system_info accessible without authentication")
        print(f"   Exposed data: {json.dumps(response.json(), indent=2)}")
    else:
        print("✅ Protected: /system_info requires authentication")
except Exception as e:
    print(f"   Could not test: {e}")

print("\n")

# 2. Weak API Key Validation
print("2. WEAK API KEY VALIDATION:")
print("-" * 50)
headers = {"X-API-Key": "any-random-string-works"}
try:
    response = requests.get(f"{BASE_URL}/features", headers=headers)
    if response.status_code == 200:
        print("❌ VULNERABLE: API accepts any non-empty API key")
        print("   Used key: 'any-random-string-works' - ACCEPTED!")
    else:
        print("✅ Protected: API properly validates keys")
except Exception as e:
    print(f"   Could not test: {e}")

print("\n")

# 3. SQL Injection Potential
print("3. SQL INJECTION VULNERABILITY:")
print("-" * 50)
print("❌ VULNERABLE CODE FOUND in database/repositories.py:159")
print("   Code: q = q.filter(StartupProfile.name.ilike(f'%{query}%'))")
print("   Issue: Direct string interpolation in SQL query")
print("   Attack vector: query=\"'; DROP TABLE startup_profiles; --\"")

print("\n")

# 4. Hardcoded Credentials
print("4. HARDCODED CREDENTIALS:")
print("-" * 50)
print("❌ VULNERABLE: Default credentials found in code")
print("   database/connection.py:36 - Default password: 'flash_password'")
print("   config.py:30 - Default secret key: 'dev-secret-key-change-in-production'")

print("\n")

# 5. Information Disclosure
print("5. INFORMATION DISCLOSURE:")
print("-" * 50)
try:
    # Config endpoints expose sensitive configuration
    endpoints = ["/config/stage-weights", "/config/model-performance"]
    for endpoint in endpoints:
        response = requests.get(f"{BASE_URL}{endpoint}")
        if response.status_code == 200:
            print(f"❌ VULNERABLE: {endpoint} exposes configuration without auth")
        else:
            print(f"✅ Protected: {endpoint} requires authentication")
except Exception as e:
    print(f"   Could not test: {e}")

print("\n")

# 6. No Input Sanitization
print("6. MISSING INPUT SANITIZATION:")
print("-" * 50)
malicious_data = {
    "startup_name": "<script>alert('XSS')</script>",
    "sector": "'; DROP TABLE predictions; --",
    "total_capital_raised_usd": "999999999999999999999999999999999999999",
    "funding_stage": "../../../etc/passwd"
}
print("❌ VULNERABLE: No input sanitization for:")
for field, payload in malicious_data.items():
    print(f"   {field}: {payload}")

print("\n")

# 7. Error Message Information Leakage
print("7. ERROR MESSAGE INFORMATION LEAKAGE:")
print("-" * 50)
try:
    # Send invalid data to trigger error
    response = requests.post(f"{BASE_URL}/predict", json={"invalid": "data"})
    if response.status_code != 200:
        error_data = response.json()
        if "detail" in error_data and isinstance(error_data["detail"], dict):
            if "type" in error_data["detail"]:
                print("❌ VULNERABLE: Error messages expose internal exception types")
                print(f"   Exposed: {error_data['detail']}")
        else:
            print("✅ Protected: Error messages are sanitized")
except Exception as e:
    print(f"   Could not test: {e}")

print("\n\n=== SUMMARY ===")
print("Critical security issues found:")
print("1. No authentication on sensitive endpoints")
print("2. Weak/missing API key validation")
print("3. SQL injection vulnerability")
print("4. Hardcoded credentials")
print("5. Information disclosure")
print("6. Missing input sanitization")
print("7. Verbose error messages")
print("\nThese vulnerabilities could allow:")
print("- Unauthorized access to system information")
print("- Database compromise via SQL injection")
print("- Use of default credentials in production")
print("- Cross-site scripting (XSS) attacks")
print("- Information gathering for targeted attacks")